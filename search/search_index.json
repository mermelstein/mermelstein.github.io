{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome! I'm Daniel Mermelstein, currently Director of Data at Sylva. About Me My career has been a journey through various parts of the data spectrum: History degree \u2192 10-person startup \u2192 go-to (AKA only) business intelligence analyst at a global non-profit \u2192 data analyst (adtech) \u2192 data analyst / data scientist (fintech) \u2192 data engineer \u2192 data everything. Fun Side Projects: ( See All Projects \u00bb ) Automated surf forecasts for the Hudson River (yes you read that right): Automated Google Sheet Searchable database of all the 3K programs in NYC: NYC3K.com Sportsbetting data and NBA game predictions: BloomBet Terminal Personalized rowing workouts: Row Hard VSCode plugin for a custom LLM chat tool: e/acc Copilot Beyond my professional life, I'm an avid extracurricular athlete and made it to the final round of selection for Team USA in 2015. I am a 5x Bronze medalist at the Dragon Boat World Championships.","title":"Home"},{"location":"#welcome","text":"I'm Daniel Mermelstein, currently Director of Data at Sylva.","title":"Welcome!"},{"location":"#about-me","text":"My career has been a journey through various parts of the data spectrum: History degree \u2192 10-person startup \u2192 go-to (AKA only) business intelligence analyst at a global non-profit \u2192 data analyst (adtech) \u2192 data analyst / data scientist (fintech) \u2192 data engineer \u2192 data everything. Fun Side Projects: ( See All Projects \u00bb ) Automated surf forecasts for the Hudson River (yes you read that right): Automated Google Sheet Searchable database of all the 3K programs in NYC: NYC3K.com Sportsbetting data and NBA game predictions: BloomBet Terminal Personalized rowing workouts: Row Hard VSCode plugin for a custom LLM chat tool: e/acc Copilot Beyond my professional life, I'm an avid extracurricular athlete and made it to the final round of selection for Team USA in 2015. I am a 5x Bronze medalist at the Dragon Boat World Championships.","title":"About Me"},{"location":"projects/","text":"Projects Here are some of the side projects I've worked on over the years. Downwinder: Hudson River Surf Forecast Description: An automated system that fetches wind and tide data to forecast surfable wave conditions on the Hudson River. The forecasts are published to a Google Sheet. Technologies: Python, Docker, PostgreSQL, OpenWeatherMap API, NOAA Tides & Currents API, Google Sheets API. Status: Active. Read more about the Downwinder project \u00bb","title":"Overview"},{"location":"projects/#projects","text":"Here are some of the side projects I've worked on over the years.","title":"Projects"},{"location":"projects/#downwinder-hudson-river-surf-forecast","text":"Description: An automated system that fetches wind and tide data to forecast surfable wave conditions on the Hudson River. The forecasts are published to a Google Sheet. Technologies: Python, Docker, PostgreSQL, OpenWeatherMap API, NOAA Tides & Currents API, Google Sheets API. Status: Active. Read more about the Downwinder project \u00bb","title":"Downwinder: Hudson River Surf Forecast"},{"location":"projects/downwinder/","text":"Downwinder: Hudson River Surf Forecast After many years dragonboating I bought an outrigger canoe and started paddling on the Hudson. Primarily for my own fitness, but I quickly discovered that out in the center of the river, if the conditions were right, you could surf! Joy oh joy! I've seen waves of 2-4 feet out there. The problem was that it took about an hour to get from my apartment to the boathouse, plus another 20 minutes to set up the canoe, only to find that the wind had shifted and there weren't any waves. That's where this forecaster came into play -> it's accurate to about 1/4 of a foot. And worse-case scenario I can always just surf the wake of the container ships. Overview The \"Downwinder\" service is a Google Sheet that's backed by a python service that does the following: Fetches current and forecast water speed data from the NOAA Tides & Currents API. Fetches wind forecast data (speed and direction) from the OpenWeatherMap API. Combines these datasets, aligning them by timestamp. Calculates the effective wind speed acting on the water surface, considering the direction of water flow. Estimates potential wave heights using the Bretschneider's formula, based on the projected wind effect. Stores the raw and processed data in a cloud-hosted PostgreSQL database. Publishes a user-friendly forecast to a public Google Sheet . It was easy to check on my phone before heading out. Posts updates and notable conditions to a dedicated Twitter account (It used to do this before Elon shut down the public Twitter API). Technical Stack Programming Language: Python Data Manipulation: Pandas, NumPy APIs: NOAA Tides & Currents API (water data) OpenWeatherMap API (wind data) Google Sheets API (publishing forecasts) Twitter API (social media updates) Database: PostgreSQL (cloud-hosted, will probably self-host at some point) Deployment & Orchestration: Docker for containerizing the Python application. A mac mini sitting on my desk. A cron job that runs the service once an hour. How It Works The fundamental idea is that waves can form when wind blows over water; if the water has a current then an opposing wind can be gentle and still apply force to the surface. The Hudson River exhibits this phenomenon because it has strong tidal currents. So what I do here is automate the process of: Gathering Data: Regularly fetching wind forecasts (speed and direction) and water current forecasts (speed and direction). Aligning Forces: The core challenge is a geometric one: determining how the wind's force aligns with the water's movement over a sufficient distance (fetch) for waves to develop. We need to calculate the component of wind that is directly opposing or running with the current. Estimating Wave Formation: Once the effective wind acting on the water is quantified, a mathematical model estimates the potential wave height. Publishing Results: The forecast is then made available through a Google Sheet. Wave Height Estimation: A Tale of Two Formulas Estimating wave height in a dynamic river environment is not as complex as it seems. My initial approach involved a formula from the paper Wave Forecasting in Shallow Water: A New Set of Growth Curves Depending on Bed Roughness . This seemed promising as it was designed for shallow water. However, it was primarily focused on depths less than 4 meters and fetch distances (the length of water over which wind blows) of around 1 kilometer. These parameters didn't quite match the typical conditions or the shorter fetch distances relevant for quick wave formation on the Hudson. Interestingly what worked better was the Bretschneider formula , which was developed in 1976 for forecasting waves generated by hurricanes in the open ocean ( paper here ). With some eyeballing and empirical adjustments that gave me reasonably accurate estimates for the Hudson over fetch distances as short as 50-100 meters. The key data transformation now was to resolve the wind and water vectors to understand the direct opposition or reinforcement, which then feeds into my adjusted Bretschneider model. We do a little bit of trigonometry to find the effective wind speed in the direction of the water flow and BAM! we have a wave height estimate. Now we know if it's surf time. Output & Publishing The processed forecast, including estimated wave heights, is written to a database. A subset of that data is then pushed to the public Google Sheet for easy viewing. Key forecast highlights or alerts used to be sent out via Twitter before the API changes. You can view the live forecast here: Hudson River Downwind Forecast Sheet .","title":"Downwinder Forecast"},{"location":"projects/downwinder/#downwinder-hudson-river-surf-forecast","text":"After many years dragonboating I bought an outrigger canoe and started paddling on the Hudson. Primarily for my own fitness, but I quickly discovered that out in the center of the river, if the conditions were right, you could surf! Joy oh joy! I've seen waves of 2-4 feet out there. The problem was that it took about an hour to get from my apartment to the boathouse, plus another 20 minutes to set up the canoe, only to find that the wind had shifted and there weren't any waves. That's where this forecaster came into play -> it's accurate to about 1/4 of a foot. And worse-case scenario I can always just surf the wake of the container ships.","title":"Downwinder: Hudson River Surf Forecast"},{"location":"projects/downwinder/#overview","text":"The \"Downwinder\" service is a Google Sheet that's backed by a python service that does the following: Fetches current and forecast water speed data from the NOAA Tides & Currents API. Fetches wind forecast data (speed and direction) from the OpenWeatherMap API. Combines these datasets, aligning them by timestamp. Calculates the effective wind speed acting on the water surface, considering the direction of water flow. Estimates potential wave heights using the Bretschneider's formula, based on the projected wind effect. Stores the raw and processed data in a cloud-hosted PostgreSQL database. Publishes a user-friendly forecast to a public Google Sheet . It was easy to check on my phone before heading out. Posts updates and notable conditions to a dedicated Twitter account (It used to do this before Elon shut down the public Twitter API).","title":"Overview"},{"location":"projects/downwinder/#technical-stack","text":"Programming Language: Python Data Manipulation: Pandas, NumPy APIs: NOAA Tides & Currents API (water data) OpenWeatherMap API (wind data) Google Sheets API (publishing forecasts) Twitter API (social media updates) Database: PostgreSQL (cloud-hosted, will probably self-host at some point) Deployment & Orchestration: Docker for containerizing the Python application. A mac mini sitting on my desk. A cron job that runs the service once an hour.","title":"Technical Stack"},{"location":"projects/downwinder/#how-it-works","text":"The fundamental idea is that waves can form when wind blows over water; if the water has a current then an opposing wind can be gentle and still apply force to the surface. The Hudson River exhibits this phenomenon because it has strong tidal currents. So what I do here is automate the process of: Gathering Data: Regularly fetching wind forecasts (speed and direction) and water current forecasts (speed and direction). Aligning Forces: The core challenge is a geometric one: determining how the wind's force aligns with the water's movement over a sufficient distance (fetch) for waves to develop. We need to calculate the component of wind that is directly opposing or running with the current. Estimating Wave Formation: Once the effective wind acting on the water is quantified, a mathematical model estimates the potential wave height. Publishing Results: The forecast is then made available through a Google Sheet.","title":"How It Works"},{"location":"projects/downwinder/#wave-height-estimation-a-tale-of-two-formulas","text":"Estimating wave height in a dynamic river environment is not as complex as it seems. My initial approach involved a formula from the paper Wave Forecasting in Shallow Water: A New Set of Growth Curves Depending on Bed Roughness . This seemed promising as it was designed for shallow water. However, it was primarily focused on depths less than 4 meters and fetch distances (the length of water over which wind blows) of around 1 kilometer. These parameters didn't quite match the typical conditions or the shorter fetch distances relevant for quick wave formation on the Hudson. Interestingly what worked better was the Bretschneider formula , which was developed in 1976 for forecasting waves generated by hurricanes in the open ocean ( paper here ). With some eyeballing and empirical adjustments that gave me reasonably accurate estimates for the Hudson over fetch distances as short as 50-100 meters. The key data transformation now was to resolve the wind and water vectors to understand the direct opposition or reinforcement, which then feeds into my adjusted Bretschneider model. We do a little bit of trigonometry to find the effective wind speed in the direction of the water flow and BAM! we have a wave height estimate. Now we know if it's surf time.","title":"Wave Height Estimation: A Tale of Two Formulas"},{"location":"projects/downwinder/#output-publishing","text":"The processed forecast, including estimated wave heights, is written to a database. A subset of that data is then pushed to the public Google Sheet for easy viewing. Key forecast highlights or alerts used to be sent out via Twitter before the API changes. You can view the live forecast here: Hudson River Downwind Forecast Sheet .","title":"Output &amp; Publishing"},{"location":"projects/nyc3k/","text":"Project: NYC 3K Finder I developed the NYC 3K Finder to help my family navigate the complex process of finding 3K programs for our kids. My goal was to consolidate information and allows parents to easily explore nearby options. The 3K Data 3K is the New York City public funding program for children 3 years old. Originally meant to cover all children in the city, it has been reduced in scope and the slots are limited to specific areas and schools/daycares. It can save parents around $20,000 per year compared to private daycare options. This means it can be extremely competitive to get a spot for your child. First I needed to scrape and process publicly available data from the NYC Department of Education and MySchools.nyc. That got me: The number of allocated 3K spots per school How each school prioritizes applications (eg current students > siblings of current students > children living near the school > other children in the borough, etc) A categorization for how many applicants in each priority group were offered a seat in the previous year The official name and address of each school The official website for each school The type of 3K program offered (e.g., Full Day, Half Day, etc.) Other data That's enough to get started. The goal was to process the data in a way that made it easier to search for programs near us and understand whether our children would be likely to get a in if we applied. This turned into in a categorical score for each program and each priority group (eg \"High Likelihood\" for current students, \"Medium Likelihood\" for siblings, etc). The Tool For each program, the tool displays: School Name & Program Type: The official name and the specific 3K program. Address: The physical location. School Website: A direct link to the program's official site, where available. MySchools.nyc Link: A direct link to the program page on MySchools for deeper research. 3K Spots Available: The reported number of 3K seats for the most recent available year. Application Success Rate (ASR): A breakdown of how many applicants in each priority group were offered a seat in the previous cycle, categorized as High, Medium, Low Likelihood, or No Applicants. Application Success Rate A main feature from a data and usability perspective is the ASR. This gave us an idea of a program's competitiveness for different applicant groups based on historical admission data. It wasn't a guarantee of admission, but it helped us prioritize our applications and understand our chances of getting in. The ASR is categorized as: High Likelihood: All applicants in this category who listed the program were offered a seat in the previous year. Medium Likelihood: Some applicants in this category were offered a seat. Low Likelihood: No applicants in this group were offered a seat. No Applicants: No one in the listed group applied for the program in the previous cycle. Not every school has admissions data by priority group but most did and it helped clarify the competitive landscape. How the Finder Works Program Search: Users can input their home address. The system then queries and displays 3K programs within a 1-mile radius on an interactive map. The backend uses Photon for address auto-complete (both while you type and also after search submission to have a more complete address) and we feed that address to Nominatim for lat/long coordinates. Then a quick application of the Haversine formula gets us distances of all schools to our searched address and we filter for those within 1 mile. Interactive Map: Nearby programs are represented by blue map pins. Clicking a pin reveals a pop-up with details: name, address, website, available spots, and the ASR. I also integrated a \"Directions\" link to Google Maps for convenience. Filtering Capabilities: Once results are shown, a filter panel allows users to refine their search. Users can filter programs based on where specific applicant groups had a \"High Likelihood\" of admission in the previous year (e.g., Sibling Priority).","title":"Project: NYC 3K Finder"},{"location":"projects/nyc3k/#project-nyc-3k-finder","text":"I developed the NYC 3K Finder to help my family navigate the complex process of finding 3K programs for our kids. My goal was to consolidate information and allows parents to easily explore nearby options.","title":"Project: NYC 3K Finder"},{"location":"projects/nyc3k/#the-3k-data","text":"3K is the New York City public funding program for children 3 years old. Originally meant to cover all children in the city, it has been reduced in scope and the slots are limited to specific areas and schools/daycares. It can save parents around $20,000 per year compared to private daycare options. This means it can be extremely competitive to get a spot for your child. First I needed to scrape and process publicly available data from the NYC Department of Education and MySchools.nyc. That got me: The number of allocated 3K spots per school How each school prioritizes applications (eg current students > siblings of current students > children living near the school > other children in the borough, etc) A categorization for how many applicants in each priority group were offered a seat in the previous year The official name and address of each school The official website for each school The type of 3K program offered (e.g., Full Day, Half Day, etc.) Other data That's enough to get started. The goal was to process the data in a way that made it easier to search for programs near us and understand whether our children would be likely to get a in if we applied. This turned into in a categorical score for each program and each priority group (eg \"High Likelihood\" for current students, \"Medium Likelihood\" for siblings, etc).","title":"The 3K Data"},{"location":"projects/nyc3k/#the-tool","text":"For each program, the tool displays: School Name & Program Type: The official name and the specific 3K program. Address: The physical location. School Website: A direct link to the program's official site, where available. MySchools.nyc Link: A direct link to the program page on MySchools for deeper research. 3K Spots Available: The reported number of 3K seats for the most recent available year. Application Success Rate (ASR): A breakdown of how many applicants in each priority group were offered a seat in the previous cycle, categorized as High, Medium, Low Likelihood, or No Applicants.","title":"The Tool"},{"location":"projects/nyc3k/#application-success-rate","text":"A main feature from a data and usability perspective is the ASR. This gave us an idea of a program's competitiveness for different applicant groups based on historical admission data. It wasn't a guarantee of admission, but it helped us prioritize our applications and understand our chances of getting in. The ASR is categorized as: High Likelihood: All applicants in this category who listed the program were offered a seat in the previous year. Medium Likelihood: Some applicants in this category were offered a seat. Low Likelihood: No applicants in this group were offered a seat. No Applicants: No one in the listed group applied for the program in the previous cycle. Not every school has admissions data by priority group but most did and it helped clarify the competitive landscape.","title":"Application Success Rate"},{"location":"projects/nyc3k/#how-the-finder-works","text":"","title":"How the Finder Works"},{"location":"projects/nyc3k/#program-search","text":"Users can input their home address. The system then queries and displays 3K programs within a 1-mile radius on an interactive map. The backend uses Photon for address auto-complete (both while you type and also after search submission to have a more complete address) and we feed that address to Nominatim for lat/long coordinates. Then a quick application of the Haversine formula gets us distances of all schools to our searched address and we filter for those within 1 mile.","title":"Program Search:"},{"location":"projects/nyc3k/#interactive-map","text":"Nearby programs are represented by blue map pins. Clicking a pin reveals a pop-up with details: name, address, website, available spots, and the ASR. I also integrated a \"Directions\" link to Google Maps for convenience.","title":"Interactive Map:"},{"location":"projects/nyc3k/#filtering-capabilities","text":"Once results are shown, a filter panel allows users to refine their search. Users can filter programs based on where specific applicant groups had a \"High Likelihood\" of admission in the previous year (e.g., Sibling Priority).","title":"Filtering Capabilities:"}]}